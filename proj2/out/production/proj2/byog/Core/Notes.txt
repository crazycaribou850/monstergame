-------------------------------------------------------

    This file does not contribute to the program.

    These are notes and notes only to assist in
    communication between creators.

-------------------------------------------------------
Mao 03/02/18 19:30
HUD:

startGame:
- ter.initialize in startGame now has yOff of -4 to make room for HUD
- HUD_update added in while loop

Problems:
- World is now cut off on bottom of rendered frame (I pushed off fixing this)
	Solution:
- Due to offset, readMouse4Tile is off by whatever xOff and yOff are
	Solution: added xOff, yOff parameters for readMouse4Tile


Mao 03/02/18 Morning/Noon

- Ans to MJ in parenthesis to his notes

- HUD section added in Game.java
*Run TestHUD.java to see sample

Notes: 
1) Game.readMouse4Tile is static so don't need to create Game instance to read Tile Type in myWorld 
This is for testing purposes right now, can change to non-static later.
2) made TETile.description PUBLIC & MUTABLE (ie private final -> public) so can access/edit for HUD
3) Std.MouseX/Y() returns a double (3 decimals), so cast into (int) = rounds down to whole int.

To-do:
	1) Catch exception: Once mouse goes off screen = ArrayIndexOutofBounds
	2) Put readMouse4Tile into Game's keyboard input loop


MJ 03/02/18 0342hrs

Game.java:
- Implemented start screen and user input functionality
    - To figure out: Is there a way to close the window when Quit is pressed?
        (Mao: no because StDraw only reads char's so can't read ESC)
    - Otherwise to discuss: - how should we implement the quit function (Aesthetic concerns)
    - Implemented continuous loop input and movement capabilities.
        (Mao: COOL! If doing Pac-Man, figure out how to slow down loop so guy can't move so fast?)

        Frames in include StartScreen, GameOverScreen, RequestSeed and startGame screen (with movement)

        Try it out by running the main of TestGame.java!
        (Mao: COOL!)
Follow ups: 1) Discuss direction of game: what shall we do with this beautiful thing
            2) Implement mouse pointer stuff (Mao: see HUD)
            3) Implement Heads Up Display (HUD) (Mao: almost there)
            4) Implement load save game functionality
            5) Ambition points stuff!! (Linked to 1) (Mao: YAS)
            6) Aesthetics?

Mao 03/01/18 Evening

 Creating Player Class:
 - Constructor that takes in type: takes in Tileset? TETile? String?
 insertPlayer()
 - uses myWorld's Random object
 - instead of randX and randY, only randX while Y increments from 0 so
 more likely to have player start at bottom (for aesthetics)

-------------------------------------------------------

Mao 02/23/18 10AM

Feedback for MJ's prev push:
I really like World.wallify. It'll help us make the halls and
rooms different tile types in the future.
Qs:
- Why need attempts and maxfailure?

Future goals?
- Eliminate prevprev. It's unsexy.
- WATER/FIRE WALLS AND GRASS FLOORS WOO
- Edge cases

1) Rooms were cut off when I ran TestGame so changed:
- initialize's w/h parameter in TestGame from 80 to 50
    so STDraw could fit on screen
- Game.java's WIDTH/HEIGHT final variables to 50
- playWithInputString's new World size to WIDTH, so world size
    is always Game's WIDTH
Result: Entire world is enclosed in STDrawing
2) Style stuff
- Deleted Test.java in Core
- Deleted all unused imports
- Fixed commas not followed by whitespace ***MJ START DOING THIS
- Fixed variables starting with upper-case letter
- *Fixed "variables may not be public"
- Unified comment styles (not in autograder): start with lowercase, don't wrap one-line comments
- Room.buildRoom: "'room' hides field"
    Solution: renamed returned room to myRoom;
- Made long if statements two lines

*Making Room.room non-public means TestRoom, TestWorld can't access and won't compile,
so I changed their file names. Same thing with Game.ter, so I put TestGame code in Game.java.
-------------------------------------------------------
MJ 02/23/18 0523hrs

1) Fixed isOccupied() function to detect if room is placed out of bounds

2) Added insertHall function and corresponding tests
    InsertRoom now does nothing except insert room in location.
    Added variable prevprev (used in insertHall method) which tracks 2nd last room created.
    InsertHall is seperate call following insertRoom.

3) Modified create room to only override tile if tile is NOTHING.
4) Fixed bug with random paths in insertHall through adding different case considerations
5) Created generateWorld method and tests
6) Created wallify (and corresponding helper method) method to improve aesthetics

0650hrs
7) Random() object is now an instance variable. Our world constructor takes in a seed
   that is passed in to the random object so that all our random generations will be
   pseudorandom.
8) Started Game.java and implemented playWithInputString method to start game


Looks pretty good rn tbh imma submit to autograder.


-------------------------------------------------------
Mao 02/22/18 ~7pm

Exceptions to catch/throw:
1) Creating Room with width/height <=2 (just walls)

1. Assigned variable name to longitude instead of long because long is primitive type

2. RandomUtils are not miscellaneous utilities. They are utilities for randomness.

3.If width/height is even, then true middle will be in between two tiles
 * Current solution: whatever floor division gives (Java / = Python //)
 *  e.g. width = 5
 *   - - - - -
 *   - - - - -
 *   - - - - -
 *       ^ 5/2 = 2 -> center[0] = lat + 2
 *
 *  e.g. width = 4
 *  - - - - - -
 *  - - - - - -
 *  - - - - - -
 *        ^ 6/2 = 3 -> center[0] = lat + 3

4. When generating random room sizes in World.createRoom, I limited
    bounded them between 3 and world.size / 2
    - won't get room sizes larger than half the world
    - eliminates need for Exception 1) ?

 -------------------------------------------------------
